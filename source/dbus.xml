<?xml version="1.0"?>

<node name="/de/ikkoku/sushi">
	<interface name="de.ikkoku.sushi">
		<method name="action">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="away">
			<arg name="server" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="back">
			<arg name="server" type="s" />
		</method>

		<method name="channel_nicks">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="nicks" type="as" direction="out" />
			<arg name="prefixes" type="as" direction="out" />
		</method>

		<method name="channels">
			<arg name="server" type="s" />
			<arg name="channels" type="as" direction="out" />
		</method>

		<method name="config_get">
			<arg name="group" type="s" />
			<arg name="key" type="s" />
			<arg name="value" type="s" direction="out" />
		</method>

		<method name="config_set">
			<arg name="group" type="s" />
			<arg name="key" type="s" />
			<arg name="value" type="s" />
		</method>

		<method name="connect">
			<arg name="server" type="s" />
		</method>

		<method name="ctcp">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="dcc_send">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="path" type="s" />
		</method>

		<method name="dcc_sends">
			<arg name="ids" type="at" direction="out" />
			<arg name="servers" type="as" direction="out" />
			<arg name="froms" type="as" direction="out" />
			<arg name="filenames" type="as" direction="out" />
			<arg name="sizes" type="at" direction="out" />
			<arg name="progresses" type="at" direction="out" />
			<arg name="speeds" type="at" direction="out" />
			<arg name="statuses" type="at" direction="out" />
		</method>

		<method name="dcc_send_accept">
			<arg name="id" type="t" />
		</method>

		<method name="dcc_send_remove">
			<arg name="id" type="t" />
		</method>

		<method name="ignore">
			<arg name="server" type="s" />
			<arg name="pattern" type="s" />
		</method>

		<method name="ignores">
			<arg name="server" type="s" />
			<arg name="ignores" type="as" direction="out" />
		</method>

		<method name="invite">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="who" type="s" />
		</method>

		<method name="join">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<!-- key is optional and can be empty (""). -->
			<arg name="key" type="s" />
		</method>

		<method name="kick">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="who" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</method>

		<method name="list">
			<arg name="server" type="s" />
			<!-- channel is optional and can be empty (""). -->
			<arg name="channel" type="s" />
		</method>

		<method name="log">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="lines" type="t" />
			<arg name="log" type="as" direction="out" />
		</method>

		<method name="message">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="mode">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<!-- mode is optional and can be empty (""). This requests the current mode. -->
			<arg name="mode" type="s" />
		</method>

		<method name="names">
			<arg name="server" type="s" />
			<!-- channel is optional and can be empty (""). -->
			<arg name="channel" type="s" />
		</method>

		<method name="nick">
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
		</method>

		<method name="nickserv">
			<arg name="server" type="s" />
		</method>

		<method name="notice">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="oper">
			<arg name="server" type="s" />
			<arg name="name" type="s" />
			<arg name="password" type="s" />
		</method>

		<method name="part">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</method>

		<method name="quit">
			<arg name="server" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</method>

		<method name="raw">
			<arg name="server" type="s" />
			<arg name="command" type="s" />
		</method>

		<method name="server_get">
			<arg name="server" type="s" />
			<arg name="group" type="s" />
			<arg name="key" type="s" />
			<arg name="value" type="s" direction="out" />
		</method>

		<method name="server_get_list">
			<arg name="server" type="s" />
			<arg name="group" type="s" />
			<arg name="key" type="s" />
			<arg name="list" type="as" direction="out" />
		</method>

		<method name="server_list">
			<!-- server is optional and can be empty (""). This lists all servers. -->
			<arg name="server" type="s" />
			<!-- group is optional and can be empty (""). This lists all groups. -->
			<arg name="group" type="s" />
			<arg name="result" type="as" direction="out" />
		</method>

		<method name="server_remove">
			<arg name="server" type="s" />
			<!-- group is optional and can be empty (""). This removes the whole server. -->
			<arg name="group" type="s" />
			<!-- key is optional and can be empty (""). This removes the whole group. -->
			<arg name="key" type="s" />
		</method>

		<method name="server_rename">
			<arg name="old" type="s" />
			<arg name="new" type="s" />
		</method>

		<method name="server_set">
			<arg name="server" type="s" />
			<arg name="group" type="s" />
			<arg name="key" type="s" />
			<arg name="value" type="s" />
		</method>

		<method name="server_set_list">
			<arg name="server" type="s" />
			<arg name="group" type="s" />
			<arg name="key" type="s" />
			<arg name="list" type="as" />
		</method>

		<method name="servers">
			<arg name="servers" type="as" direction="out" />
		</method>

		<method name="shutdown">
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</method>

		<method name="support_chantypes">
			<arg name="server" type="s" />
			<arg name="chantypes" type="s" direction="out" />
		</method>

		<method name="support_prefix">
			<arg name="server" type="s" />
			<arg name="prefix" type="as" direction="out" />
		</method>

		<method name="topic">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<!-- topic is optional and can be empty (""). This requests the current topic. -->
			<arg name="topic" type="s" />
		</method>

		<method name="unignore">
			<arg name="server" type="s" />
			<arg name="pattern" type="s" />
		</method>

		<method name="user_away">
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="away" type="b" direction="out" />
		</method>

		<method name="user_channel_mode">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="nick" type="s" />
			<arg name="mode" type="s" direction="out" />
		</method>

		<method name="user_channel_prefix">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="nick" type="s" />
			<arg name="prefix" type="s" direction="out" />
		</method>

		<method name="user_from">
			<arg name="server" type="s" />
			<!-- nick is optional and can be empty (""). This requests the own from. -->
			<arg name="nick" type="s" />
			<arg name="from" type="s" direction="out" />
		</method>

		<method name="version">
			<arg name="version" type="at" direction="out" />
		</method>

		<method name="who">
			<arg name="server" type="s" />
			<arg name="mask" type="s" />
			<arg name="operators_only" type="b" />
		</method>

		<method name="whois">
			<arg name="server" type="s" />
			<arg name="mask" type="s" />
		</method>



		<signal name="action">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="from" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="away">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<signal name="away_message">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="back">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<signal name="banlist">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="mask" type="s" />
			<!-- who is optional and can be empty (""). -->
			<arg name="who" type="s" />
			<!-- when is optional and can be empty (0). -->
			<arg name="when" type="x" />
			<!-- mask == "" and who == "" and when == -1 signifies the end of the list. -->
		</signal>

		<signal name="cannot_join">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<!-- reason == "l" means the channel is full. -->
			<!-- reason == "i" means the channel is invite only. -->
			<!-- reason == "b" means you are banned. -->
			<!-- reason == "k" means the channel has a key set. -->
			<arg name="reason" type="s" />
		</signal>

		<!-- Gets emitted when a connect attempt is made. -->
		<signal name="connect">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<!-- Gets emitted when a successful connection has been established. -->
		<signal name="connected">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<signal name="ctcp">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="from" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="dcc_send">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="id" type="t" />
			<arg name="from" type="s" />
			<arg name="filename" type="s" />
			<arg name="size" type="t" />
			<arg name="progress" type="t" />
			<arg name="speed" type="t" />
			<arg name="status" type="t" />
		</signal>

		<signal name="invite">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- from is optional and can be empty (""). -->
			<arg name="from" type="s" />
			<arg name="channel" type="s" />
			<arg name="who" type="s" />
		</signal>

		<signal name="join">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="from" type="s" />
			<arg name="channel" type="s" />
		</signal>

		<signal name="kick">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="from" type="s" />
			<arg name="channel" type="s" />
			<arg name="who" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</signal>

		<signal name="list">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="users" type="x" />
			<arg name="topic" type="s" />
			<!-- channel == "" and users == -1 and topic == "" signifies the end of the list. -->
		</signal>

		<signal name="message">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="from" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="mode">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- from is optional and can be empty (""). -->
			<arg name="from" type="s" />
			<arg name="target" type="s" />
			<arg name="mode" type="s" />
			<!-- parameter is optional and can be empty (""). -->
			<arg name="parameter" type="s" />
		</signal>

		<signal name="motd">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- message == "" signifies the end of the MOTD or a missing MOTD. -->
			<arg name="message" type="s" />
		</signal>

		<signal name="names">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<!-- len(nicks) == 0 signifies the end of the list. -->
			<arg name="nicks" type="as" />
			<arg name="prefixes" type="as" />
		</signal>

		<signal name="nick">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- from == "" signifies the current nick. -->
			<arg name="from" type="s" />
			<arg name="new_nick" type="s" />
		</signal>

		<signal name="no_such">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<!-- type == "n" means nick/channel. -->
			<!-- type == "s" means server. -->
			<!-- type == "c" means channel. -->
			<arg name="type" type="s" />
		</signal>

		<signal name="notice">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="from" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="oper">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<signal name="part">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="from" type="s" />
			<arg name="channel" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</signal>

		<signal name="quit">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="from" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</signal>

		<!-- Gets emitted when maki exits. -->
		<signal name="shutdown">
			<arg name="time" type="x" />
		</signal>

		<signal name="topic">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- from is optional and can be empty (""). -->
			<arg name="from" type="s" />
			<arg name="channel" type="s" />
			<arg name="topic" type="s" />
		</signal>

		<signal name="whois">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="message" type="s" />
			<!-- message == "" signifies the end of the list. -->
		</signal>
	</interface>
</node>
