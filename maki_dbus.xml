<?xml version="1.0"?>

<node name="/de/ikkoku/sushi">
	<interface name="de.ikkoku.sushi">
		<method name="action">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="away">
			<arg name="server" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="back">
			<arg name="server" type="s" />
		</method>

		<method name="channels">
			<arg name="server" type="s" />
			<arg name="channels" type="as" direction="out" />
		</method>

		<method name="channel_topic">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="topic" type="s" direction="out" />
		</method>

		<method name="connect">
			<arg name="server" type="s" />
		</method>

		<method name="ctcp">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="ignore">
			<arg name="server" type="s" />
			<arg name="pattern" type="s" />
		</method>

		<method name="ignores">
			<arg name="server" type="s" />
			<arg name="ignores" type="as" direction="out" />
		</method>

		<method name="invite">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="who" type="s" />
		</method>

		<method name="join">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<!-- key is optional and can be empty (""). -->
			<arg name="key" type="s" />
		</method>

		<method name="kick">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="who" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</method>

		<method name="kill">
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="reason" type="s" />
		</method>

		<method name="list">
			<arg name="server" type="s" />
			<!-- channel is optional and can be empty (""). -->
			<arg name="channel" type="s" />
		</method>

		<method name="log">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="lines" type="t" />
			<arg name="log" type="as" direction="out" />
		</method>

		<method name="message">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="mode">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<!-- mode is optional and can be empty (""). This requests the current mode. -->
			<arg name="mode" type="s" />
		</method>

		<method name="nick">
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
		</method>

		<method name="nicks">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="nicks" type="as" direction="out" />
		</method>

		<method name="nickserv">
			<arg name="server" type="s" />
		</method>

		<method name="notice">
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</method>

		<method name="oper">
			<arg name="server" type="s" />
			<arg name="name" type="s" />
			<arg name="password" type="s" />
		</method>

		<method name="own_nick">
			<arg name="server" type="s" />
			<arg name="nick" type="s" direction="out" />
		</method>

		<method name="part">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</method>

		<method name="quit">
			<arg name="server" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</method>

		<method name="raw">
			<arg name="server" type="s" />
			<arg name="command" type="s" />
		</method>

		<method name="server_get">
			<arg name="server" type="s" />
			<arg name="group" type="s" />
			<arg name="key" type="s" />
			<arg name="value" type="s" direction="out" />
		</method>

		<method name="server_list">
			<!-- server is optional and can be empty (""). This lists all servers. -->
			<arg name="server" type="s" />
			<!-- group is optional and can be empty (""). This lists all groups. -->
			<arg name="group" type="s" />
			<arg name="result" type="as" direction="out" />
		</method>

		<method name="server_remove">
			<arg name="server" type="s" />
			<!-- group is optional and can be empty (""). This removes the whole server. -->
			<arg name="group" type="s" />
			<!-- key is optional and can be empty (""). This removes the whole group. -->
			<arg name="key" type="s" />
		</method>

		<method name="server_rename">
			<arg name="old" type="s" />
			<arg name="new" type="s" />
		</method>

		<method name="server_set">
			<arg name="server" type="s" />
			<arg name="group" type="s" />
			<arg name="key" type="s" />
			<arg name="value" type="s" />
		</method>

		<method name="servers">
			<arg name="servers" type="as" direction="out" />
		</method>

		<method name="shutdown">
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</method>

		<method name="topic">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<!-- topic is optional and can be empty (""). This requests the current topic. -->
			<arg name="topic" type="s" />
		</method>

		<method name="unignore">
			<arg name="server" type="s" />
			<arg name="pattern" type="s" />
		</method>

		<method name="user_away">
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="away" type="b" direction="out" />
		</method>

		<method name="user_channel_mode">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="nick" type="s" />
			<arg name="mode" type="s" direction="out" />
		</method>

		<method name="user_channel_prefix">
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="nick" type="s" />
			<arg name="prefix" type="s" direction="out" />
		</method>



		<signal name="action">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="away">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<signal name="away_message">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="back">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<signal name="banlist">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="mask" type="s" />
			<!-- who is optional and can be empty (""). -->
			<arg name="who" type="s" />
			<!-- when is optional and can be empty (0). -->
			<arg name="when" type="x" />
			<!-- mask == "" and who == "" and when == -1 signifies the end of the list. -->
		</signal>

		<!-- Gets emitted when a connect attempt is made. -->
		<signal name="connect">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<!-- Gets emitted when a successful connection has been established. -->
		<signal name="connected">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- nick is the own nick. -->
			<arg name="nick" type="s" />
		</signal>

		<signal name="ctcp">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="invalid_target">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="target" type="s" />
		</signal>

		<signal name="invite">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- nick is optional and can be empty (""). -->
			<arg name="nick" type="s" />
			<arg name="channel" type="s" />
			<arg name="who" type="s" />
		</signal>

		<signal name="join">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="channel" type="s" />
		</signal>

		<signal name="kick">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="channel" type="s" />
			<arg name="who" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</signal>

		<signal name="list">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="channel" type="s" />
			<arg name="users" type="x" />
			<arg name="topic" type="s" />
			<!-- channel == "" and users == -1 and topic == "" signifies the end of the list. -->
		</signal>

		<signal name="message">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="mode">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- nick is optional and can be empty (""). -->
			<arg name="nick" type="s" />
			<arg name="target" type="s" />
			<arg name="mode" type="s" />
			<!-- parameter is optional and can be empty (""). -->
			<arg name="parameter" type="s" />
		</signal>

		<signal name="motd">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="nick">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="new_nick" type="s" />
		</signal>

		<signal name="notice">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="oper">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<signal name="own_ctcp">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="own_message">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="own_notice">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="target" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="part">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="channel" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</signal>

		<signal name="query">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="query_ctcp">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="query_notice">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<arg name="message" type="s" />
		</signal>

		<signal name="quit">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<arg name="nick" type="s" />
			<!-- message is optional and can be empty (""). -->
			<arg name="message" type="s" />
		</signal>

		<!-- Gets emitted when a reconnect attempt is made. -->
		<signal name="reconnect">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
		</signal>

		<!-- Gets emitted when maki exits. -->
		<signal name="shutdown">
			<arg name="time" type="x" />
		</signal>

		<signal name="topic">
			<arg name="time" type="x" />
			<arg name="server" type="s" />
			<!-- nick is optional and can be empty (""). -->
			<arg name="nick" type="s" />
			<arg name="channel" type="s" />
			<arg name="topic" type="s" />
		</signal>
	</interface>
</node>
